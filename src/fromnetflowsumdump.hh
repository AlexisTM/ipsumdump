#ifndef CLICK_FROMNETFLOWSUMDUMP_HH
#define CLICK_FROMNETFLOWSUMDUMP_HH
#include <click/element.hh>
#include <click/task.hh>

/*
=c

FromNetFlowSummaryDump(FILE [, I<KEYWORDS>])

=s analysis

reads packets from a NetFlow summary file

=d

Reads IP packet descriptors from a file containing NetFlow data, in the ASCII
summary format described below, then creates packets containing info from the
descriptors and pushes them out the output. Optionally stops the driver when
there are no more packets.

FILE may be compressed with gzip(1) or bzip2(1); FromIPSummaryDump will run
zcat(1) or bzcat(1) to uncompress it.

Keyword arguments are:

=over 8

=item STOP

Boolean. If true, then FromIPSummaryDump will ask the router to stop when it
is done reading. Default is false.

=item ACTIVE

Boolean. If false, then FromIPSummaryDump will not emit packets (until the
`C<active>' handler is written). Default is true.

=item ZERO

Boolean. If true, then emitted packet data is zero, except for data set by the
dump. If false (the default), this data is random garbage.

=item MULTIPACKET

Boolean. If true, then generate multiple packets for each flow, according to
the flow's packet count. Packet timestamps all equal the flow start timestamp.
Default is false.

=back

Only available in user-level processes.

=n

Packets generated by FromNetFlowSummaryDump always have IP version 4 and IP
header length 5. The rest of the packet data is zero or garbage, unless set by
the dump. Generated packets will usually have incorrect lengths and checksums.

=head1 FILE FORMAT

FromNetFlowSummaryDump reads line-oriented ASCII files. Blank lines, and lines
starting with `C<!>' or `C<#>', are ignored. Data lines contain 15 or more
fields separated by vertical bars `C<|>'. FromNetFlowSummaryDump pays
attention to some of these fields:

  Field  Meaning                       Example
  -----  ----------------------------  ----------
  0      Source IP address             192.4.1.32
  1      Destination IP address        18.26.4.44
  5      Packet count in flow          5
  6      Byte count in flow            10932
  7      Flow timestamp (UNIX-style)   998006995
  8      Flow end timestamp            998006999
  9      Source port                   3917
  10     Destination port              80
  13     IP protocol                   6
  14     IP TOS bits                   0

=h active read/write

Value is a Boolean.

=h encap read-only

Returns `IP'. Useful for ToDump's USE_ENCAP_FROM option.

=h filesize read-only

Returns the length of the NetFlow summary file, in bytes, or "-" if that
length cannot be determined.

=h filepos read-only

Returns FromNetFlowSummaryDump's position in the file, in bytes.

=a

FromDump, FromIPSummaryDump */

class FromNetFlowSummaryDump : public Element { public:

    FromNetFlowSummaryDump();
    ~FromNetFlowSummaryDump();

    const char *class_name() const	{ return "FromNetFlowSummaryDump"; }
    const char *processing() const	{ return AGNOSTIC; }
    FromNetFlowSummaryDump *clone() const { return new FromNetFlowSummaryDump;}

    int configure(const Vector<String> &, ErrorHandler *);
    int initialize(ErrorHandler *);
    void uninitialize();
    void add_handlers();

    void run_scheduled();
    Packet *pull(int);

  private:

    static const uint32_t BUFFER_SIZE = 32768;
    
    int _fd;
    String _buffer;
    int _pos;
    int _len;

    Vector<int> _contents;
    
    bool _stop : 1;
    bool _format_complaint : 1;
    bool _zero;
    bool _active;
    bool _multipacket;
    Packet *_work_packet;
    uint32_t _multipacket_extra_length;

    Task _task;

    struct timeval _time_offset;
    String _filename;
    FILE *_pipe;
    off_t _file_offset;

    int error_helper(ErrorHandler *, const char *);
    int read_buffer(ErrorHandler *);
    int read_line(String &, ErrorHandler *);

    Packet *read_packet(ErrorHandler *);
    Packet *handle_multipacket(Packet *);

    static String read_handler(Element *, void *);
    static int write_handler(const String &, Element *, void *, ErrorHandler *);
    
};

#endif
