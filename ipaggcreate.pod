=head1 NAME

ipaggcreate - produce aggregate statistics of network traffic or trace

=head1 SYNOPSIS

ipaggcreate [B<-r> | B<-i> | B<--netflow-summary>] [B<--src>, B<--dst>, B<--sport>, B<--dport>, ...] [other options] [I<files> or I<interfaces>]

=head1 DESCRIPTION

The B<ipaggcreate> program reads IP packets from one or more data sources,
categorizes the packets into aggregates (such as "all packets with source
address 192.4.10.9" or "all packets with length 10"), and produces a file
that reports the number of packets or bytes per aggregate.  The resulting
file is easy to process with text-based tools.  (But see the B<--binary>
option, which generates a compressed, quick-to-process binary file.)

Here are a couple lines of B<ipaggcreate> output, from `ipaggcreate -s
/home/kohler/largedump.gz':

  !IPAggregate 1.0
  !creator "src/ipaggcreate -s /home/kohler/largedump.gz"
  !counts packets
  !times 976937726.638704 977337361.804592 399635.165888
  !num_nonzero 1437
  !ip
  4.2.49.2 1
  4.2.49.4 1
  4.17.143.9 1
  4.21.203.29 104

The `B<-s>' option, which is equivalent to `B<--src>', tells B<ipaggcreate>
to categorize each packet by its I<s>ource IP address.
`F</home/kohler/largedump.gz>' is a compressed tcpdump(1) file.  Each data
line represents an aggregate; the first field is the aggregate name (here,
an IP source address), and the second field the number of packets in that
aggregate.

=head1 OPTIONS

=head2 Data Sources

Data source options tell B<ipaggcreate> what kind of data source to use:
L<tcpdump(1)> raw-packet files (B<--tcpdump>), live network interfaces
(B<--interface>), NetFlow summary files (B<--netflow-summary>),
B<ipsumdump> output files (B<--ipsumdump>), DAG or NLANR-formatted files
(B<--dag>, B<--nlanr>), or others.

Non-option arguments specify the files, or interfaces, to read. For
example, `ipaggcreate B<-r> eth0 eth1' will read two tcpdump(1) files,
named "eth0" and "eth1"; `ipaggcreate B<-i> eth0 eth1' will read from two
live network interfaces, "eth0" and "eth1".

Options that read files read from the standard input when you supply a
single dash C<-> as a filename, or when you give no filenames at all.

=over 4

=item B<--tcpdump>, B<-r>

Read from one or more files produced by L<tcpdump(1)>'s B<-w> option (also
known as "pcap files"). Stop when all the files are exhausted. This is the
default. Files (except for standard input) may be compressed by gzip(1) or
bzip2(1); B<ipsumdump> will uncompress them on the fly.

=item B<--interface>, B<-i>

Read from live network interfaces. When run this way, B<ipsumdump> will
continue until interrupted with SIGINT or SIGHUP. When stopped,
B<ipsumdump> appends a comment to its output file, indicating how many
packets were dropped by the kernel before output.

=item B<--ipsumdump>

Read from one or more B<ipsumdump> files. Any packet characteristics not
specified by the input files are set to 0.

=item B<--format>=I<format>

Read from one or more B<ipsumdump> files, using the specified default
format.  The I<format> should be a space-separated list of content types;
see L<ToIPSummaryDump(n)> for a list.

=item B<--dag>[=I<encap>]

Read from one or more DAG-formatted trace files.  For new-style ERF dumps,
which contain encapsulation type information, just say B<--dag>.  For
old-style dumps, you must supply the right I<encap> argument: C<ATM> for
ATM RFC-1483 encapsulation (the most common), C<ETHER> for Ethernet, C<PPP>
for PPP, C<IP> for raw IP, C<HDLC> for Cisco HDLC, C<PPP_HDLC> for PPP
HDLC, or C<SUNATM> for Sun ATM.  See L<http://dag.cs.waikato.ac.nz/>.

=item B<--nlanr>

Read from one or more NLANR-formatted trace files (fr, fr+, or tsh
format).  See L<http://pma.nlanr.net/Traces/>.

=item B<--ip-addresses>

Read files containing IP addresses, one address per line.  The aggregate
categorization must be either an IP source or destination address.

=item B<--tu-summary>

Read TCP/UDP summary files.  Each line represents one packet, and carries
the following information: timestamp, source address, source port,
destination address, destination port, protocol, payload length.  For
example:

  976937735.345744 18.26.4.9 22 64.55.139.202 26876 T 0
  976937770.197008 128.10.5.110 63749 64.55.139.202 113 T 5

=item B<--bro-conn-summary>

Read Bro connection summary files.  Each line represents one connection
attempt, and carries the following information: timestamp, source address,
destination address, direction (inbound/outbound).

=item B<--netflow-summary>

Read from one or more NetFlow summary files. These are line-oriented ASCII
files; blank lines, and lines starting with '!' or '#', are ignored. Other
lines should contain 15 or more fields separated by vertical bars '|'.
B<Ipsumdump> pays attention to some of these fields:

  Field  Meaning                       Example
  -----  ----------------------------  ----------
  0      Source IP address             192.4.1.32
  1      Destination IP address        18.26.4.44
  5      Packet count in flow          5
  6      Byte count in flow            10932
  7      Flow timestamp (UNIX-style)   998006995
  8      Flow end timestamp            998006999
  9      Source port                   3917
  10     Destination port              80
  12     TCP flags (OR of all pkts)    18
  13     IP protocol                   6
  14     IP TOS bits                   0

=item B<--tcpdump-text>

Read from one or more files containing L<tcpdump(1)> textual output.  It's
much better to use the binary files produced by 'tcpdump B<-w>', but if
someone threw those away and all you have is the ASCII output, you can
still make do.  Only works with tcpdump versions 3.7 and earlier.

=back

=head2 Aggregate Category

These options determine how packets are categorized into aggregates; you
must supply at most one.

=over 4

=item B<--src>, B<-s>

Aggregate by IP source address; all packets with the same source address
form an aggregate.

=item B<--dst>, B<-d>

Aggregate by IP destination address.  This is the default.

=item B<--length>, B<-l>

Aggregate by IP length.

=item B<--ip> I<field>

Aggregate by the named IP field.  Examples include C<ip src> (equivalent to
B<--src>), C<ip ttl>, C<ip off>, C<udp sport>, and so forth.  See
L<AggregateIP(1)> for a full list.

=item B<--flows>

Aggregate by TCP or UDP flow, or, essentially, by end-to-end
transport-level connection.  Two packets are part of the same aggregate if
and only if they are part of the same TCP or UDP connection.  Each flow is
assigned its own aggregate.  The aggregate number is not meaningful;
non-TCP/UDP packets are ignored.

=item B<--unidirectional-flows>

Aggregate by unidirectional TCP or UDP flow.  Like B<--flows>, but packets
from a single connection but heading in different directions are assigned
different aggregates.

=item B<--address-pairs>

Aggregate by address pair.  Two packets are part of the same aggregate if
and only if they involve the same pair of IP addresses.  The aggregate
number is not meaningful.

=item B<--unidirectional-address-pairs>

Aggregate by unidirectional address pair.  Two packets are part of the same
aggregate if and only if their source addresses match and their destination
address match.

=back

=head2 Other Options

=over 4

=item B<--output>=I<file>, B<-o> I<file>

Write the summary dump to I<file> instead of to the standard output.

=item B<--write-tcpdump>=I<file>, B<-w> I<file>

Write processed packets to a tcpdump(1) I<file> -- or to the standard
output, if I<file> is a single dash C<-> -- in addition to the usual
summary output.

=item B<--binary>, B<-b>

Write the summary dump in binary format. See below for more information.

=item B<--filter>=I<filter>, B<-f> I<filter>

Only include packets and flows matching a tcpdump(1) filter. For example,
`ipsumdump B<-f> "tcp && src net 18/8"' will summarize data only for TCP
packets from net 18. (The syntax for I<filter> is currently a subset of
tcpdump's syntax.)

=item B<--bad-packets>

Print lines like `C<!bad IP header length 4>' for packets with no IP
headers, bad IP headers, or bad TCP/UDP headers. (A bad header has an
incorrect length or unexpected version, or is spread across multiple
fragments.) Default is to print a normal line, but with a dash `C<->' for
any piece of information that came from a bad header.

=item B<--anonymize>, B<-A>

Anonymize IP addresses in the output. The anonymization preserves prefix
and class. This means, first, that two anonymized addresses will share the
same prefix when their non-anonymized counterparts share the same prefix;
and second, that anonymized addresses will be in the same class (A, B, C,
or D) as their non-anonymized counterparts. The anonymization algorithm
comes from tcpdpriv(1); it works like `tcpdpriv B<-A50 -C4>'.

If B<--anonymize> and B<--write-tcpdump> are both on, the B<tcpdump> output
file will have anonymized IP addresses. However, the file will contain
actual packet data, unlike B<tcpdpriv> output.

=item B<--no-promiscuous>

Do not place interfaces into promiscuous mode. Promiscuous mode is the
default.

=item B<--sample>=I<p>

Sample packets with probability I<p>. That is, I<p> is the chance that a
packet will cause output to be generated. The actual probability may differ
from the specified probability, due to fixed point arithmetic; check the
output for a `C<!sampling_prob>' comment to see the real probability.
Strictly speaking, this option samples records, not packets; so for NetFlow
summaries without B<--multipacket>, it will sample flows.

=item B<--multipacket>

Supply this option if you are reading NetFlow or IP summaries -- files
where each record might represent multiple packets -- and you would like
the output summary to have one line per packet, instead of the default one
line per record. See also B<--packet-count>, above.

=item B<--collate>

Sort output packets by increasing timestamp. Use this option when reading
from multiple tcpdump(1) files to ensure that the output has sorted
timestamps. Combine B<--collate> with B<--write-tcpdump> to collate
overlapping tcpdump(1) files into a single, sorted tcpdump(1) file.

=item B<--interval>=I<time>

Process packets for I<time>, an interval length in seconds (or give a
suffix like `C<2m>' or `C<1hr>'). For B<--interface>, B<ipsumdump> will
quit after it has run for I<time>. For other options, B<ipsumdump> will
quit before writing a packet whose timestamp is more than I<time> seconds
later than the timestamp on the first packet it sees.

=item B<--limit-packets>=I<count>

Output at most I<count> packets, then quit.

=item B<--map-address>=I<addrs>

I<addrs> is a space- or comma-separated list of IP addresses and/or
prefixes. When the summary dump completes, B<ipsumdump> will write those
addresses to the standard error, paired with their anonymized counterparts.

=item B<--record-counts>=I<time>

Useful when reading from interfaces. This option causes B<ipsumdump> to
write a comment recording the cumulative number of packets output, and the
number of packets dropped by the kernel before B<ipsumdump> could process
them, every I<time> seconds. (Or you can say, for example, `2m' for 2
minutes.) A sample comment:

  !counts out 0 kdrop 0

This says that B<ipsumdump> has output 0 records, and the kernel reported 0
packet drops since B<ipsumdump> began. `C<!bad>' lines are counted as
records.

=item B<--random-seed>=I<seed>

Set the random seed deterministically to I<seed>, an unsigned integer. By
default, the random seed is initialized to a random value using
F</dev/random>, if it exists, combined with other data. The random seed
indirectly determines which packets are sampled, and the values of
anonymized IP addresses.

=item B<--quiet>, B<-q>

Do not print a progress bar to standard error. This is the default when
B<ipsumdump> isn't running interactively.

=item B<--config>

Do not produce a summary. Instead, write the Click configuration that
B<ipsumdump> would run to the standard output.

=item B<--verbose>, B<-V>

Produce more verbose error messages.

=item B<--help>, B<-h>

Print a help message to the standard output, then exit.

=item B<--version>, B<-v>

Print version number and license information to the standard output, then
exit.

=back

=head1 SIGNALS

When killed with SIGTERM or SIGINT, B<ipsumdump> will exit cleanly by
flushing its buffers. If you want it to flush its buffers without exiting,
kill it with SIGHUP.

=head1 EXAMPLES

The `B<-tsSdDp>' option set covers the most commonly useful information
about each packet: timestamp, source address, source port, destination
address, destination port, and protocol. Invoking `ipsumdump B<-i> eth1
B<-tsSdDp>' might produce output like this:

  !IPSummaryDump 1.1
  !creator "ipsumdump -i eth1 -tsSdDp"
  !host max.lcdf.org
  !starttime 1000967293.569808 (Wed Sep 19 23:28:13 2001)
  !data timestamp ip_src sport ip_dst dport ip_proto
  1000967303.641581 64.71.165.130 80 192.168.1.101 4450 T
  1000967303.670506 64.71.165.130 80 192.168.1.101 4450 T
  1000967303.882621 18.26.4.44 - 192.168.1.101 - I
  1000967304.253874 64.71.165.130 80 192.168.1.101 4442 T
  1000967304.390016 192.150.187.11 53 192.168.1.101 1299 U
  1000967304.425992 207.171.182.16 80 192.168.1.101 4451 T

Here is the same data, anonymized with B<-A>:

  !IPSummaryDump 1.1
  !creator "ipsumdump --ipsumdump -A -tsSdDp"
  !host max.lcdf.org
  !starttime 1000968019.67508 (Wed Sep 19 23:40:19 2001)
  !data timestamp ip_src sport ip_dst dport ip_proto
  1000967303.641581 29.50.142.215 80 204.196.101.50 4450 T
  1000967303.670506 29.50.142.215 80 204.196.101.50 4450 T
  1000967303.882621 89.142.236.79 - 204.196.101.50 - I
  1000967304.253874 29.50.142.215 80 204.196.101.50 4442 T
  1000967304.390016 204.224.59.219 53 204.196.101.50 1299 U
  1000967304.425992 192.230.64.231 80 204.196.101.50 4451 T

=head1 BINARY FORMAT

Binary ipsumdump files begin with several ASCII lines, just like regular
ipsumdump files. The line `C<!binary>' indicates that the rest of the file,
starting immediately after the newline, consists of binary records. Each
record looks like this:

   +---------------+------------...
   |X|record length|    data
   +---------------+------------...
    <---4 bytes--->

The initial word of data contains the record length in bytes. (All numbers
in the file are stored in network byte order.) The record length includes
the initial word itself, so the minimum valid record length is 4. The
high-order bit `C<X>' is the metadata indicator. It is zero for regular
packets and one for metadata lines.

Regular packet records have binary fields stored in the order indicated by
the `C<!data>' line, as follows:

   Field Name  Length  Description
   timestamp      8    timestamp sec, usec
   ip_src         4    source IP address
   ip_dst         4    destination IP address
   sport          2    source port
   dport          2    destination port
   ip_len         4    IP length field
   ip_proto       1    IP protocol
   ip_id          2    IP ID
   ip_frag        1    fragment descriptor
                       ('F', 'f', or '.')
   ip_fragoff     2    IP fragment offset field
   tcp_seq        4    TCP seqnece number
   tcp_ack        4    TCP ack number
   tcp_flags      1    TCP flags
   tcp_opt        ?    TCP options
   tcp_sack       ?    TCP SACK options
   payload_len    4    payload length
   count          4    packet count

Each field is Length bytes long. Variable-length fields have Length `C<?>' in
the table; in a packet record, these fields consist of a single length byte,
followed by that many bytes of data.

The data stored in a metadata record is just an ASCII string, ending with
newline, same as in a regular ASCII IPSummaryDump file. `C<!bad>' records, for
example, are stored this way.

=head1 CLICK

The B<ipsumdump> program uses the Click modular router, an extensible
system for processing packets. Click routers consist of C++ components
called elements. While some elements run only in a Linux kernel, most can
run either in the kernel or in user space, and there are user-level
elements for reading packets from libpcap or from tcpdump files.

B<Ipsumdump> creates and runs a simple user-level Click configuration.
However, you don't need to install Click to run B<ipsumdump>; the
F<libclick> directory contains all the relevant parts of Click, bundled
into a library.

If you're curious, try running `ipsumdump B<--config>' with some other
options to see the Click configuration B<ipsumdump> would run.

This is, I think, a pleasant way to write a packet processor!

=head1 COMPATIBILITY

Version 1.0 of the IPSummaryDump file format expressed 'ip fragoff' fields
in units of 8 bytes. In version 1.1 and later, these fields are expressed
in bytes.

The names of `C<!data>' fields were formerly printed in quotes, and could
contain spaces, like the following:

  !data 'timestamp' 'ip src' 'sport' 'ip dst' 'dport' 'ip proto'

B<ipsumdump> still understands files with the old format.

=head1 SEE ALSO

tcpdump(1), tcpdpriv(1), click(1)

See http://www.pdos.lcs.mit.edu/click/ for more on Click.

=head1 AUTHOR

Eddie Kohler <kohler@icir.org>, based on the Click modular router.

Extensive feedback and suggestions from Vern Paxson <vern@icir.org>.
Anonymization algorithm from tcpdpriv(1) by Greg Minshall.
