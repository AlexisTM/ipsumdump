=head1 NAME

ipsumdump - produce ASCII summary of network traffic or tcpdump(1) file

=head1 SYNOPSIS

ipsumdump [B<-r> | B<-i> | B<--netflow-summary>] [B<--src>, B<--dst>, B<--sport>, B<--dport>, ...] [other options] [I<files> or I<interfaces>]

=head1 DESCRIPTION

The B<ipsumdump> program reads IP packets from one or more data sources,
then summarizes those packets into a line-based ASCII file. The resulting
summary dump is easy to process with text-based tools.

Here are a couple lines of B<ipsumdump> output, from `ipsumdump -sd
/home/kohler/largedump.gz':

  !IPSummaryDump 1.1
  !creator "ipsumdump -sd /home/kohler/largedump.gz"
  !host max.lcdf.org
  !starttime 1000943858.353723 (Wed Sep 19 16:57:38 2001)
  !data 'ip src' 'ip dst'
  64.55.139.202 209.247.204.242
  18.26.4.9 64.55.139.202

The `B<-sd>' option, which is equivalent to `B<--src --dst>', tells
B<ipsumdump> to log I<s>ource and I<d>estination IP addresses.
`F</home/kohler/largedump.gz>' is a compressed tcpdump(1) file. Each data
line represents a packet; a space separates the two addresses. The
`C<!data>' comment describes the contents of each data line.

=head1 OPTIONS

=head2 Data Sources

Data source options tell B<ipsumdump> what kind of data source to use:
tcpdump(1) files (B<--tcpdump>), live network interfaces (B<--interface>),
NetFlow summary files (B<--netflow-summary>), or B<ipsumdump> output files
(B<--ipsumdump>).

Non-option arguments specify the files, or interfaces, to read. For
example, `ipsumdump B<-r> eth0 eth1' will read two tcpdump(1) files, named
"eth0" and "eth1"; `ipsumdump B<-i> eth0 eth1' will read from two live
network interfaces, "eth0" and "eth1".

Options that read files -- B<--tcpdump>, B<--netflow-summary>, and
B<--ipsumdump> -- read from the standard input when you supply a single
dash C<-> as a filename, or when you give no filenames at all.

=over 4

=item B<--tcpdump>, B<-r>

Read from one or more tcpdump(1) files, and stop when all the files are
exhausted. This is the default. Files (except for standard input) may be
compressed by gzip(1) or bzip2(1); B<ipsumdump> will uncompress them on the
fly.

=item B<--interface>, B<-i>

Read from live network interfaces. When run this way, B<ipsumdump> will
continue until interrupted with SIGINT or SIGHUP. When stopped,
B<ipsumdump> appends a comment to its output file, indicating how many
packets were dropped by the kernel before output.

=item B<--netflow-summary>

Read from one or more NetFlow summary files. These are line-oriented ASCII
files; blank lines, and lines starting with `!' or `#', are ignored. Other
lines should contain 15 or more fields separated by vertical bars `|'.
B<Ipsumdump> pays attention to some of these fields:

  Field  Meaning                       Example
  -----  ----------------------------  ----------
  0      Source IP address             192.4.1.32
  1      Destination IP address        18.26.4.44
  5      Packet count in flow          5
  6      Byte count in flow            10932
  7      Flow timestamp (UNIX-style)   998006995
  9      Source port                   3917
  10     Destination port              80
  13     IP protocol                   6
  14     IP TOS bits                   0

=item B<--ipsumdump>

Read from one or more B<ipsumdump> output files. Any packet characteristics
not specified by the input files are set to 0.

=back

=head2 Dump Contents

These options determine what actually goes in the dump; supply an arbitrary
number of them. In the output, fields are separated by spaces. If you say
`B<-sd>', for example -- or the equivalent `B<--src --dst>' -- the dump's
data lines will contain an IP source address, a space, and an IP
destination address:

    192.168.1.101 18.26.4.44

If you supply no dump content options, B<ipsumdump> will not create a
summary dump. This may be useful if you're only interested in creating a
tcpdump file with B<--write-tcpdump>.

=over 4

=item B<--timestamp>, B<-t>

Include packet timestamp in the dump. Example: C<1000212480.005813>.

=item B<--src>, B<-s>

Include IP source address in the dump. Example: C<192.168.1.101>.

=item B<--dst>, B<-d>

Include IP destination address in the dump. Example: C<18.26.4.44>.

=item B<--sport>, B<-S>

Include TCP or UDP source port in the dump. Example: C<8928>. For non-TCP
or UDP packets, and for fragments after the first, this field is a single
dash C<->.

=item B<--dport>, B<-D>

Include TCP or UDP destination port in the dump. Example: C<80>.

=item B<--length>, B<-l>

Include packet length in the dump, not including any link-level headers.
Example: C<72>.

=item B<--protocol>, B<-p>

Include IP protocol in the dump. Can be C<T> for TCP, C<U> for UDP,
C<I> for ICMP, or a number for some other protocol.

=item B<--id>

Include IP ID field in the dump. Example: C<19371>.

=item B<--fragment>, B<-g>

Include IP fragment test in the dump. The field value is C<F> for first
fragments, C<f> for second and subsequent fragments, and C<.> (a single
period) for nonfragments.

=item B<--fragment-offset>, B<--fragoff>, B<-G>

Include IP fragment offset in the dump. The field value is the fragment
offset in bytes, possibly followed by a C<+> suffix, indicating the MF
(more fragments) flag. Examples: C<0+> (fragment offset 0, more fragments
forthcoming), C<552> (fragment offset 552, this is the last fragment).

=item B<--tcp-seq>, B<-Q>

Include TCP sequence number in the dump. Example: C<4009339012>. For
non-TCP packets, and for fragments after the first, this field is a single
dash C<->.

=item B<--tcp-ack>, B<-K>

Include TCP acknowledgement number in the dump. Example: C<4009339012>. For
non-TCP packets, and for fragments after the first, this field is a single
dash C<->.

=item B<--tcp-flags>, B<-F>

Include TCP flags byte in the dump. Each flag is represented by an
uppercase letter. Example: C<PA> (PSH and ACK are on, everything else is
off). If no flags are on, prints C<.> (a single period). For non-TCP
packets, and for fragments after the first, this field is a single dash
C<->.

Flag characters are C<F> for FIN, C<S> for SYN, C<R> for RST, C<P> for PSH,
C<A> for ACK, C<U> for URG, C<E> for ECE (flag bit 6), and C<W> for CWR
(flag bit 7). Older versions printed a number between 0 and 255, or used
characters C<X> and C<Y> for flag bits 6 and 7.

=item B<--payload-length>, B<-L>

Include length of packet payload in the dump. This is the length of the TCP
or UDP payload, for TCP or UDP packets, or the length of the IP payload,
for other IP packets. Example: C<1000>.

=item B<--payload>

Include the actual packet payload in the dump. This is the TCP or UDP
payload, for TCP or UDP packets, or the IP payload, for other IP packets.
Output as a double-quoted C string; non-ASCII characters, and double-quotes
and backslashes, appear as C backslash escapes. Example: C<",25\r\n\000">.

=item B<--packet-count>, B<-c>

Include packet count in the dump. Some kinds of logs -- such as NetFlow
summary logs -- record information about flows, not packets. A flow
represents multiple packets; the packet count says exactly how many.
Example: C<1>. See also B<--multipacket>, below.

=back

=head2 Other Options

=over 4

=item B<--output>=I<file>, B<-o> I<file>

Write the summary dump to I<file> instead of to the standard output.

=item B<--write-tcpdump>=I<file>, B<-w> I<file>

Write processed packets to a tcpdump(1) I<file> -- or to the standard
output, if I<file> is a single dash C<-> -- in addition to the usual
summary output.

=item B<--filter>=I<filter>, B<-f> I<filter>

Only include packets and flows matching a tcpdump(1) filter. For example,
`ipsumdump B<-f> "tcp && src net 18/8"' will summarize data only for TCP
packets from net 18. (The syntax for I<filter> is currently a subset of
tcpdump's syntax.)

=item B<--bad-packets>

Print lines like `C<!bad IP header length 4>' for packets with no IP
headers, bad IP headers, or bad TCP/UDP headers. (A bad header has an
incorrect length or unexpected version, or is spread across multiple
fragments.) Default is to print a normal line, but with a dash `C<->' for
any piece of information that came from a bad header.

=item B<--anonymize>, B<-A>

Anonymize IP addresses in the output. The anonymization preserves prefix
and class. This means, first, that two anonymized addresses will share the
same prefix when their non-anonymized counterparts share the same prefix;
and second, that anonymized addresses will be in the same class (A, B, C,
or D) as their non-anonymized counterparts. The anonymization algorithm
comes from tcpdpriv(1); it works like `tcpdpriv B<-A50 -C4>'.

If B<--anonymize> and B<--write-tcpdump> are both on, the B<tcpdump> output
file will have anonymized IP addresses. However, the file will contain
actual packet data, unlike B<tcpdpriv> output.

=item B<--no-promiscuous>

Do not place interfaces into promiscuous mode. Promiscuous mode is the
default.

=item B<--sample>=I<p>

Sample packets with probability I<p>. That is, I<p> is the chance that a
packet will cause output to be generated. The actual probability may differ
from the specified probability, due to fixed point arithmetic; check the
output for a `C<!sampling_prob>' comment to see the real probability.
Strictly speaking, this option samples records, not packets; so for NetFlow
summaries without B<--multipacket>, it will sample flows.

=item B<--multipacket>

Supply this option if you are reading NetFlow or IP summaries -- files
where each record might represent multiple packets -- and you would like
the output summary to have one line per packet, instead of the default one
line per record. See also B<--packet-count>, above.

=item B<--collate>

Sort output packets by increasing timestamp. Use this option when reading
from multiple tcpdump(1) files to ensure that the output has sorted
timestamps. Combine B<--collate> with B<--write-tcpdump> to collate
overlapping tcpdump(1) files into a single, sorted tcpdump(1) file.

=item B<--interval>=I<time>

Process packets for I<time>, an interval length in seconds (or give a
suffix like `C<2m>' or `C<1hr>'). For B<--interface>, B<ipsumdump> will
quit after it has run for I<time>. For other options, B<ipsumdump> will
quit before writing a packet whose timestamp is more than I<time> seconds
later than the timestamp on the first packet it sees.

=item B<--map-address>=I<addrs>

I<addrs> is a space- or comma-separated list of IP addresses and/or
prefixes. When the summary dump completes, B<ipsumdump> will write those
addresses to the standard error, paired with their anonymized counterparts.

=item B<--record-counts>=I<time>

Useful when reading from interfaces. This option causes B<ipsumdump> to
write a comment recording the cumulative number of packets output, and the
number of packets dropped by the kernel before B<ipsumdump> could process
them, every I<time> seconds. (But you can say, for example, `2m' for 2
minutes.) A sample comment:

  !counts out 0 kdrop 0

This says that B<ipsumdump> has output 0 records, and the kernel reported 0
packet drops since B<ipsumdump> began. `C<!bad>' lines are counted as
records.

=item B<--random-seed>=I<seed>

Set the random seed deterministically to I<seed>, an unsigned integer. By
default, the random seed is initialized to a random value using
F</dev/random>, if it exists, combined with other data. The random seed
indirectly determines which packets are sampled, and the values of
anonymized IP addresses.

=item B<--quiet>, B<-q>

Do not print a progress bar to standard error. This is the default when
B<ipsumdump> isn't running interactively.

=item B<--config>

Do not produce a summary. Instead, write the Click configuration that
B<ipsumdump> would run to the standard output.

=item B<--verbose>, B<-V>

Produce more verbose error messages.

=item B<--help>, B<-h>

Print a help message to the standard output, then exit.

=item B<--version>, B<-v>

Print version number and license information to the standard output, then
exit.

=back

=head1 SIGNALS

When killed with SIGTERM or SIGINT, B<ipsumdump> will exit cleanly by
flushing its buffers. If you want it to flush its buffers without exiting,
kill it with SIGHUP.

=head1 EXAMPLES

The `B<-tsSdDp>' option set covers the most commonly useful information
about each packet: timestamp, source address, source port, destination
address, destination port, and protocol. Invoking `ipsumdump B<-i> eth1
B<-tsSdDp>' might produce output like this:

  !IPSummaryDump 1.1
  !creator "ipsumdump -i eth1 -tsSdDp"
  !host max.lcdf.org
  !starttime 1000967293.569808 (Wed Sep 19 23:28:13 2001)
  !data 'timestamp' 'ip src' 'sport' 'ip dst' 'dport' 'ip proto'
  1000967303.641581 64.71.165.130 80 192.168.1.101 4450 T
  1000967303.670506 64.71.165.130 80 192.168.1.101 4450 T
  1000967303.882621 18.26.4.44 - 192.168.1.101 - I
  1000967304.253874 64.71.165.130 80 192.168.1.101 4442 T
  1000967304.390016 192.150.187.11 53 192.168.1.101 1299 U
  1000967304.425992 207.171.182.16 80 192.168.1.101 4451 T

Here is the same data, anonymized with B<-A>:

  !IPSummaryDump 1.1
  !creator "ipsumdump --ipsumdump -A -tsSdDp"
  !host max.lcdf.org
  !starttime 1000968019.67508 (Wed Sep 19 23:40:19 2001)
  !data 'timestamp' 'ip src' 'sport' 'ip dst' 'dport' 'ip proto'
  1000967303.641581 29.50.142.215 80 204.196.101.50 4450 T
  1000967303.670506 29.50.142.215 80 204.196.101.50 4450 T
  1000967303.882621 89.142.236.79 - 204.196.101.50 - I
  1000967304.253874 29.50.142.215 80 204.196.101.50 4442 T
  1000967304.390016 204.224.59.219 53 204.196.101.50 1299 U
  1000967304.425992 192.230.64.231 80 204.196.101.50 4451 T

=head1 NOTE

The B<ipsumdump> program uses the Click modular router, an extensible
system for processing packets. Click routers consist of C++ components
called elements. While some elements run only in a Linux kernel, most can
run either in the kernel or in user space, and there are user-level
elements for reading packets from libpcap or from tcpdump files.

B<Ipsumdump> creates and runs a simple user-level Click configuration.
However, you don't need to install Click to run B<ipsumdump>; the
F<libclick> directory contains all the relevant parts of Click, bundled
into a library.

If you're curious, try running `ipsumdump B<--config>' with some other
options to see the Click configuration B<ipsumdump> would run.

This is, I think, a pleasant way to write a packet processor!

=head1 COMPATIBILITY

Version 1.0 of the IPSummaryDump file format expressed 'ip fragoff' fields
in units of 8 bytes. In version 1.1 and later, these fields are expressed
in bytes.

=head1 SEE ALSO

tcpdump(1), tcpdpriv(1), click(1)

See http://www.pdos.lcs.mit.edu/click/ for more on Click.

=head1 AUTHOR

Eddie Kohler <kohler@icir.org>, based on the Click modular router.

Extensive feedback and suggestions from Vern Paxson <vern@icir.org>.
Anonymization algorithm from tcpdpriv(1) by Greg Minshall.
